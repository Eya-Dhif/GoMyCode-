{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Eya-Dhif/GoMyCode-/blob/main/Chatbot\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7dc4f9f9",
      "metadata": {
        "id": "7dc4f9f9"
      },
      "outputs": [],
      "source": [
        "# Speech to Text"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b45553fa",
      "metadata": {
        "id": "b45553fa",
        "outputId": "59cec010-055b-44af-f53d-46e5dfb41373"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "please say something in 4 seconds... and wait for 4 seconds for the answer.....\n",
            "Accessing Microphone..\n",
            "Waiting for you to speak...\n",
            "result2:\n",
            "[]\n",
            "Please retry...\n"
          ]
        }
      ],
      "source": [
        "#pip install SpeechRecognition\n",
        "#pip install pipwin\n",
        "#pipwin install pyaudio\n",
        "import speech_recognition as sr\n",
        "import sys\n",
        "r = sr.Recognizer()\n",
        "\n",
        "print(\"please say something in 4 seconds... and wait for 4 seconds for the answer.....\")\n",
        "print(\"Accessing Microphone..\")\n",
        "\n",
        "try:\n",
        "   with sr.Microphone() as source:\n",
        "      r.adjust_for_ambient_noise(source, duration=2)\n",
        "   # use the default microphone as the audio source, duration higher means environment noisier\n",
        "      print(\"Waiting for you to speak...\")\n",
        "      audio = r.listen(source) # listen for the first phrase and extract it into audio data\n",
        "\n",
        "except (ModuleNotFoundError,AttributeError):\n",
        "    print('Please check installation')\n",
        "    sys.exit(0)\n",
        "\n",
        "try:\n",
        "    print(\"You said \" + r.recognize_google(audio)) # recognize speech using Google Speech Recognition\n",
        "except LookupError: # speech is unintelligible\n",
        "     print(\"Could not understand audio\")\n",
        "\n",
        "except:\n",
        "     print(\"Please retry...\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "84550873",
      "metadata": {
        "id": "84550873"
      },
      "outputs": [],
      "source": [
        "# Importing the Packages for Chatbot"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "53792eb3",
      "metadata": {
        "id": "53792eb3"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import pickle\n",
        "from tensorflow.keras import layers , activations , models ,preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ee5fcb82",
      "metadata": {
        "id": "ee5fcb82"
      },
      "outputs": [],
      "source": [
        "# Reading the Data from the Files"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f0bdc90e",
      "metadata": {
        "id": "f0bdc90e",
        "outputId": "cc10f8a6-1a8f-488c-8aa8-613de7f77fbe"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "VOCAB SIZE : 1894\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras import preprocessing , utils\n",
        "import os\n",
        "import yaml\n",
        "\n",
        "dir_path = 'C:/Users/HP/Downloads/chatbot_nlp\\data'\n",
        "files_list = os.listdir(dir_path + os.sep)\n",
        "\n",
        "questions = list()\n",
        "answers = list()\n",
        "\n",
        "for filepath in files_list:\n",
        "    stream = open( dir_path + os.sep + filepath , 'rb')\n",
        "    docs = yaml.safe_load(stream)\n",
        "    conversations = docs['conversations']\n",
        "    for con in conversations:\n",
        "        if len( con ) > 2 :\n",
        "            questions.append(con[0])\n",
        "            replies = con[ 1 : ]\n",
        "            ans = ''\n",
        "            for rep in replies:\n",
        "                ans += ' ' + rep\n",
        "            answers.append( ans )\n",
        "        elif len( con )> 1:\n",
        "            questions.append(con[0])\n",
        "            answers.append(con[1])\n",
        "\n",
        "answers_with_tags = list()\n",
        "for i in range( len( answers ) ):\n",
        "    if type( answers[i] ) == str:\n",
        "        answers_with_tags.append( answers[i] )\n",
        "    else:\n",
        "        questions.pop( i )\n",
        "\n",
        "answers = list()\n",
        "for i in range( len( answers_with_tags ) ) :\n",
        "    answers.append( '<START> ' + answers_with_tags[i] + ' <END>' )\n",
        "\n",
        "tokenizer = preprocessing.text.Tokenizer()\n",
        "tokenizer.fit_on_texts( questions + answers )\n",
        "VOCAB_SIZE = len( tokenizer.word_index )+1\n",
        "print( 'VOCAB SIZE : {}'.format( VOCAB_SIZE ))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "91933dda",
      "metadata": {
        "id": "91933dda"
      },
      "outputs": [],
      "source": [
        "# Preparing Data for Seq2Seq Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2f8a812b",
      "metadata": {
        "id": "2f8a812b",
        "outputId": "72573671-37dd-4887-e60a-13cff264ae04"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(564, 22) 22\n",
            "(564, 74) 74\n",
            "(564, 74, 1894)\n"
          ]
        }
      ],
      "source": [
        "from gensim.models import Word2Vec\n",
        "import re\n",
        "\n",
        "vocab = []\n",
        "for word in tokenizer.word_index:\n",
        "    vocab.append( word )\n",
        "\n",
        "def tokenize( sentences ):\n",
        "    tokens_list = []\n",
        "    vocabulary = []\n",
        "    for sentence in sentences:\n",
        "        sentence = sentence.lower()\n",
        "        sentence = re.sub( '[^a-zA-Z]', ' ', sentence )\n",
        "        tokens = sentence.split()\n",
        "        vocabulary += tokens\n",
        "        tokens_list.append( tokens )\n",
        "    return tokens_list , vocabulary\n",
        "#p = tokenize( questions + answers )\n",
        "#model = Word2Vec( p[ 0 ] )\n",
        "\n",
        "#embedding_matrix = np.zeros( ( VOCAB_SIZE , 100 ) )\n",
        "#for i in range( len( tokenizer.word_index ) ):\n",
        "     #embedding_matrix[ i ] = model[ vocab[i] ]\n",
        "\n",
        "# encoder_input_data\n",
        "tokenized_questions = tokenizer.texts_to_sequences( questions )\n",
        "maxlen_questions = max( [ len(x) for x in tokenized_questions] )\n",
        "padded_questions = preprocessing.sequence.pad_sequences( tokenized_questions , maxlen=maxlen_questions , padding='post' )\n",
        "encoder_input_data = np.array( padded_questions )\n",
        "print( encoder_input_data.shape , maxlen_questions )\n",
        "\n",
        "# decoder_input_data\n",
        "tokenized_answers = tokenizer.texts_to_sequences( answers )\n",
        "maxlen_answers = max( [ len(x) for x in tokenized_answers ] )\n",
        "padded_answers = preprocessing.sequence.pad_sequences( tokenized_answers , maxlen=maxlen_answers , padding='post' )\n",
        "decoder_input_data = np.array( padded_answers )\n",
        "print( decoder_input_data.shape , maxlen_answers )\n",
        "\n",
        "# decoder_output_data\n",
        "tokenized_answers = tokenizer.texts_to_sequences( answers )\n",
        "for i in range(len(tokenized_answers)) :\n",
        "    tokenized_answers[i] = tokenized_answers[i][1:]\n",
        "padded_answers = preprocessing.sequence.pad_sequences( tokenized_answers , maxlen=maxlen_answers , padding='post' )\n",
        "onehot_answers = utils.to_categorical( padded_answers , VOCAB_SIZE )\n",
        "decoder_output_data = np.array( onehot_answers )\n",
        "print( decoder_output_data.shape )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7b2b16e1",
      "metadata": {
        "id": "7b2b16e1",
        "outputId": "e48113f1-0231-428e-9c67-dd7986dd063c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "([10, 7, 269], [10, 7, 269])"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "tokenized_questions[0],tokenized_questions[1]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bfe7e2b8",
      "metadata": {
        "id": "bfe7e2b8",
        "outputId": "a2b52bf8-6cbe-48c3-88ef-3a89885dc63d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(22,)"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "padded_questions[0].shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9c6f22db",
      "metadata": {
        "id": "9c6f22db"
      },
      "outputs": [],
      "source": [
        "# Defining the Encoder-Decoder Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c1671e37",
      "metadata": {
        "id": "c1671e37",
        "outputId": "3a06927b-befb-4f52-bc1e-7ce4602f007c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_1 (InputLayer)           [(None, 50)]         0           []                               \n",
            "                                                                                                  \n",
            " input_2 (InputLayer)           [(None, 50)]         0           []                               \n",
            "                                                                                                  \n",
            " embedding (Embedding)          (None, 50, 200)      2000000     ['input_1[0][0]']                \n",
            "                                                                                                  \n",
            " embedding_1 (Embedding)        (None, 50, 200)      2000000     ['input_2[0][0]']                \n",
            "                                                                                                  \n",
            " lstm (LSTM)                    [(None, 200),        320800      ['embedding[0][0]']              \n",
            "                                 (None, 200),                                                     \n",
            "                                 (None, 200)]                                                     \n",
            "                                                                                                  \n",
            " lstm_1 (LSTM)                  [(None, 50, 200),    320800      ['embedding_1[0][0]',            \n",
            "                                 (None, 200),                     'lstm[0][1]',                   \n",
            "                                 (None, 200)]                     'lstm[0][2]']                   \n",
            "                                                                                                  \n",
            " dense (Dense)                  (None, 50, 10000)    2010000     ['lstm_1[0][0]']                 \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 6,651,600\n",
            "Trainable params: 6,651,600\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ],
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Embedding, LSTM, GRU, Flatten, Dropout, Lambda\n",
        "import tensorflow as tf\n",
        "maxlen_questions = 50\n",
        "VOCAB_SIZE = 10000\n",
        "maxlen_answers = 50\n",
        "encoder_inputs = tf.keras.layers.Input(shape=( maxlen_questions , ))\n",
        "encoder_embedding = tf.keras.layers.Embedding( VOCAB_SIZE, 200 , mask_zero=True ) (encoder_inputs)\n",
        "encoder_outputs , state_h , state_c = tf.keras.layers.LSTM( 200 , return_state=True )( encoder_embedding )\n",
        "encoder_states = [ state_h , state_c ]\n",
        "\n",
        "decoder_inputs = tf.keras.layers.Input(shape=( maxlen_answers , ))\n",
        "decoder_embedding = tf.keras.layers.Embedding( VOCAB_SIZE, 200 , mask_zero=True) (decoder_inputs)\n",
        "decoder_lstm = tf.keras.layers.LSTM( 200 , return_state=True , return_sequences=True )\n",
        "decoder_outputs , _ , _ = decoder_lstm ( decoder_embedding , initial_state=encoder_states )\n",
        "decoder_dense = tf.keras.layers.Dense( VOCAB_SIZE , activation=tf.keras.activations.softmax )\n",
        "output = decoder_dense ( decoder_outputs )\n",
        "\n",
        "model = tf.keras.models.Model([encoder_inputs, decoder_inputs], output )\n",
        "model.compile(optimizer=tf.keras.optimizers.RMSprop(), loss='categorical_crossentropy')\n",
        "\n",
        "model.summary()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ac365afd",
      "metadata": {
        "id": "ac365afd"
      },
      "outputs": [],
      "source": [
        "# Training the Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a5d334d3",
      "metadata": {
        "id": "a5d334d3"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from keras import preprocessing , utils\n",
        "from keras.utils import pad_sequences\n",
        "import os\n",
        "import yaml\n",
        "import keras\n",
        "from gensim.models import Word2Vec\n",
        "import re\n",
        "import numpy as np\n",
        "from keras.utils import pad_sequences\n",
        "import yaml\n",
        "import os\n",
        "\n",
        "dir_path = 'C:/Users/HP/Downloads/chatbot_nlp\\data'\n",
        "files_list = os.listdir(dir_path + os.sep)\n",
        "questions = list()\n",
        "answers = list()\n",
        "for filepath in files_list:\n",
        "    stream = open( dir_path + os.sep + filepath , 'rb')\n",
        "    docs = yaml.safe_load(stream)\n",
        "    conversations = docs['conversations']\n",
        "    for con in conversations:\n",
        "        if len( con ) > 2 :\n",
        "           questions.append(con[0])\n",
        "           replies = con[ 1 : ]\n",
        "           ans = ''\n",
        "           for rep in replies:\n",
        "               ans += ' ' + rep\n",
        "           answers.append( ans )\n",
        "        elif len( con )> 1:\n",
        "           questions.append(con[0])\n",
        "           answers.append(con[1])\n",
        "answers_with_tags = list()\n",
        "for i in range( len( answers ) ):\n",
        "    if type( answers[i] ) == str:\n",
        "        answers_with_tags.append( answers[i] )\n",
        "    else:\n",
        "        questions.pop( i )\n",
        "answers = list()\n",
        "for i in range( len( answers_with_tags ) ) :\n",
        "    answers.append( '<START> ' + answers_with_tags[i] + ' <END>' )\n",
        "tokenizer = preprocessing.text.Tokenizer()\n",
        "tokenizer.fit_on_texts( questions + answers )\n",
        "VOCAB_SIZE = len( tokenizer.word_index )+1\n",
        "\n",
        "vocab = []\n",
        "for word in tokenizer.word_index:\n",
        "    vocab.append( word )\n",
        "\n",
        "def tokenize( sentences ):\n",
        "    tokens_list = []\n",
        "    vocabulary = []\n",
        "    for sentence in sentences:\n",
        "        sentence = sentence.lower()\n",
        "        sentence = re.sub( '[^a-zA-Z]', ' ', sentence )\n",
        "        tokens = sentence.split()\n",
        "        vocabulary += tokens\n",
        "        tokens_list.append( tokens )\n",
        "    return tokens_list , vocabulary\n",
        "\n",
        "# encoder_input_data\n",
        "tokenized_questions = tokenizer.texts_to_sequences( questions )\n",
        "maxlen_questions = max([len(x) for x in tokenized_questions])\n",
        "padded_questions = pad_sequences(tokenized_questions , maxlen=maxlen_questions , padding='post')\n",
        "encoder_input_data = np.array( padded_questions )\n",
        "# decoder_input_data\n",
        "tokenized_answers = tokenizer.texts_to_sequences( answers )\n",
        "maxlen_answers = max( [ len(x) for x in tokenized_answers ] )\n",
        "padded_answers = pad_sequences(tokenized_answers , maxlen=maxlen_answers , padding='post' )\n",
        "decoder_input_data = np.array( padded_answers )\n",
        "# decoder_output_data\n",
        "tokenized_answers = tokenizer.texts_to_sequences( answers )\n",
        "for i in range(len(tokenized_answers)) :\n",
        "    tokenized_answers[i] = tokenized_answers[i][1:]\n",
        "padded_answers = pad_sequences(tokenized_answers , maxlen=maxlen_answers , padding='post' )\n",
        "onehot_answers = utils.to_categorical( padded_answers , VOCAB_SIZE )\n",
        "decoder_output_data = np.array( onehot_answers )\n",
        "\n",
        "encoder_inputs = keras.layers.Input(shape=( maxlen_questions , ))\n",
        "encoder_embedding = keras.layers.Embedding( VOCAB_SIZE, 200, mask_zero=True ) (encoder_inputs)\n",
        "encoder_outputs , state_h , state_c = keras.layers.LSTM(200 , return_state=True )( encoder_embedding )\n",
        "encoder_states = [ state_h , state_c ]\n",
        "decoder_inputs = keras.layers.Input(shape=( maxlen_answers ,))\n",
        "decoder_embedding = keras.layers.Embedding( VOCAB_SIZE, 200, mask_zero=True) (decoder_inputs)\n",
        "decoder_lstm = keras.layers.LSTM( 200 , return_state=True ,return_sequences=True )\n",
        "decoder_outputs , _ , _ = decoder_lstm ( decoder_embedding ,initial_state=encoder_states )\n",
        "decoder_dense = keras.layers.Dense( VOCAB_SIZE , activation=keras.activations.softmax )\n",
        "output = decoder_dense ( decoder_outputs )\n",
        "model = keras.models.Model([encoder_inputs, decoder_inputs], output )\n",
        "model.compile(optimizer=keras.optimizers.RMSprop(), loss='categorical_crossentropy')\n",
        "model.fit([encoder_input_data , decoder_input_data], decoder_output_data, batch_size=50, epochs=150, verbose=0 )\n",
        "model.save( 'model.h5' )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ff7b12a3",
      "metadata": {
        "id": "ff7b12a3"
      },
      "outputs": [],
      "source": [
        "output = model.predict([encoder_input_data[0,np.newaxis], decoder_input_data[0,np.newaxis]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a36da6eb",
      "metadata": {
        "id": "a36da6eb"
      },
      "outputs": [],
      "source": [
        "output[0][0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e59c7bc5",
      "metadata": {
        "id": "e59c7bc5"
      },
      "outputs": [],
      "source": [
        "np.argmax(output[0][0])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b365aef4",
      "metadata": {
        "id": "b365aef4"
      },
      "outputs": [],
      "source": [
        "tokenizer_dict = { tokenizer.word_index[i]:i for i in tokenizer.word_index}\n",
        "tokenizer_dict"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9a69e359",
      "metadata": {
        "id": "9a69e359"
      },
      "outputs": [],
      "source": [
        "tokenizer_dict[np.argmax(output[0][1])]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "21c2cd90",
      "metadata": {
        "id": "21c2cd90"
      },
      "outputs": [],
      "source": [
        "tokenizer_dict[np.argmax(output[0][2])]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d590233",
      "metadata": {
        "id": "0d590233"
      },
      "outputs": [],
      "source": [
        "output = model.predict([encoder_input_data[0,np.newaxis], decoder_input_data[0,np.newaxis]])\n",
        "sampled_word_indexes = np.argmax(output[0],1)\n",
        "sentence = \"\"\n",
        "maxlen_answers = 74\n",
        "for sampled_word_index in sampled_word_indexes:\n",
        "    sampled_word = None\n",
        "    sampled_word = tokenizer_dict[sampled_word_index]\n",
        "    sentence += ' {}'.format( sampled_word )\n",
        "    if sampled_word == 'end' or len(sentence.split()) > maxlen_answers:\n",
        "       break\n",
        "sentence"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "986a5df1",
      "metadata": {
        "id": "986a5df1"
      },
      "outputs": [],
      "source": [
        "def print_train_result(index):\n",
        "    print(f\"Question is : {questions[index]}\")\n",
        "    print(f\"Answer is : {answers[index]}\")\n",
        "    output = model.predict([encoder_input_data[index,np.newaxis], decoder_input_data[index,np.newaxis]])\n",
        "    sampled_word_indexes = np.argmax(output[0],1)\n",
        "    sentence = \"\"\n",
        "    maxlen_answers = 74\n",
        "    for sampled_word_index in sampled_word_indexes:\n",
        "        sampled_word = None\n",
        "        sampled_word = tokenizer_dict[sampled_word_index]\n",
        "        sentence += ' {}'.format( sampled_word )\n",
        "        if sampled_word == 'end' or len(sentence.split()) > maxlen_answers:\n",
        "            break\n",
        "    print(f\"Model prediction: {sentence}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3de56806",
      "metadata": {
        "id": "3de56806"
      },
      "outputs": [],
      "source": [
        "print_train_result(4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "43f1896f",
      "metadata": {
        "id": "43f1896f"
      },
      "outputs": [],
      "source": [
        "print_train_result(55)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "29527c16",
      "metadata": {
        "id": "29527c16"
      },
      "outputs": [],
      "source": [
        "print_train_result(32)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8bf613c8",
      "metadata": {
        "id": "8bf613c8"
      },
      "outputs": [],
      "source": [
        "# Defining Inference Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dd3f8191",
      "metadata": {
        "id": "dd3f8191"
      },
      "outputs": [],
      "source": [
        "def make_inference_models():\n",
        "\n",
        "    encoder_model = tf.keras.models.Model(encoder_inputs, encoder_states)\n",
        "    decoder_state_input_h = tf.keras.layers.Input(shape=( 200 ,))\n",
        "    decoder_state_input_c = tf.keras.layers.Input(shape=( 200 ,))\n",
        "    decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]\n",
        "    decoder_outputs, state_h, state_c = decoder_lstm(\n",
        "        decoder_embedding , initial_state=decoder_states_inputs)\n",
        "    decoder_states = [state_h, state_c]\n",
        "    decoder_outputs = decoder_dense(decoder_outputs)\n",
        "    decoder_model = tf.keras.models.Model(\n",
        "        [decoder_inputs] + decoder_states_inputs,\n",
        "        [decoder_outputs] + decoder_states)\n",
        "\n",
        "    return encoder_model , decoder_model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ee0acb34",
      "metadata": {
        "id": "ee0acb34"
      },
      "outputs": [],
      "source": [
        "def str_to_tokens( sentence : str ):\n",
        "    words = sentence.lower().split()\n",
        "    tokens_list = list()\n",
        "    for word in words:\n",
        "        tokens_list.append( tokenizer.word_index[ word ] )\n",
        "    return preprocessing.sequence.pad_sequences( [tokens_list] , maxlen=maxlen_questions , padding='post')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "78a7b02f",
      "metadata": {
        "id": "78a7b02f"
      },
      "outputs": [],
      "source": [
        "enc_model , dec_model = make_inference_models()\n",
        "\n",
        "for _ in range(10):\n",
        "    states_values = enc_model.predict( str_to_tokens( input('Enter question : ' )))\n",
        "    empty_target_seq = np.zeros( ( 1 , 1 ) )\n",
        "    empty_target_seq[0, 0] = tokenizer.word_index['start']\n",
        "    stop_condition = False\n",
        "    decoded_translation = ''\n",
        "    while not stop_condition :\n",
        "        dec_outputs , h , c = dec_model.predict([ empty_target_seq ] + states_values )\n",
        "        sampled_word_index = np.argmax( dec_outputs[0, -1, :] )\n",
        "        sampled_word = None\n",
        "        for word , index in tokenizer.word_index.items() :\n",
        "            if sampled_word_index == index :\n",
        "               decoded_translation += ' {}'.format( word )\n",
        "               sampled_word = word\n",
        "\n",
        "        if sampled_word == 'end' or len(decoded_translation.split()) > maxlen_answers:\n",
        "            stop_condition = True\n",
        "\n",
        "        empty_target_seq = np.zeros( ( 1 , 1 ) )\n",
        "        empty_target_seq[ 0 , 0 ] = sampled_word_index\n",
        "        states_values = [h,c]\n",
        "\n",
        "    print( decoded_translation )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "71913853",
      "metadata": {
        "id": "71913853"
      },
      "outputs": [],
      "source": [
        "# Sample Code"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "735fc59c",
      "metadata": {
        "id": "735fc59c"
      },
      "outputs": [],
      "source": [
        "from IPython.display import Audio\n",
        "\n",
        "#https://cloudconvert.com/m4a-to-wav\n",
        "Path = \"C:/Users/User/Dropbox/TT Library/AI Model/Speech & Chatbot & NLP/Recording.wav\"\n",
        "\n",
        "Audio(Path)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4eb1f2e7",
      "metadata": {
        "id": "4eb1f2e7"
      },
      "outputs": [],
      "source": [
        "import wave\n",
        "\n",
        "audio = wave.open(Path)\n",
        "\n",
        "from scipy.io import wavfile\n",
        "\n",
        "fs, x = wavfile.read(Path)\n",
        "print('Reading with scipy.io.wavfile.read:', x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ef63b0fe",
      "metadata": {
        "id": "ef63b0fe"
      },
      "outputs": [],
      "source": [
        "import speech_recognition as sr\n",
        "\n",
        "r = sr.Recognizer()\n",
        "audio1 = sr.AudioFile(Path)\n",
        "with audio1 as source:\n",
        "     audio = r.record(source)\n",
        "print(\"Speech to text : \" + r.recognize_google(audio))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d398db87",
      "metadata": {
        "id": "d398db87"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}